#include <iostream>
#include <vector>
#include <map>

using namespace std;

int func(char ch)
{
	int r = -1;
	if (ch == 'А' || ch == 'а') r = 0;
	else if (ch == 'Б' || ch == 'б') r = 1;
	else if (ch == 'В' || ch == 'в') r = 2;
	else if (ch == 'Г' || ch == 'г') r = 3;
	else if (ch == 'Д' || ch == 'д') r = 4;
	else if (ch == 'Е' || ch == 'е'|| ch == 'Ё' || ch == 'ё') r = 5;
	else if (ch == 'Ж' || ch == 'ж') r = 6;
	else if (ch == 'З' || ch == 'з') r = 7;
	else if (ch == 'И' || ch == 'и') r = 8;
	else if (ch == 'Й' || ch == 'й') r = 9;
	else if (ch == 'К' || ch == 'к') r = 10;
	else if (ch == 'Л' || ch == 'л') r = 11;
	else if (ch == 'М' || ch == 'м') r = 12;
	else if (ch == 'Н' || ch == 'н') r = 13;
	else if (ch == 'О' || ch == 'о') r = 14;
	else if (ch == 'П' || ch == 'п') r = 15;
	else if (ch == 'Р' || ch == 'р') r = 16;
	else if (ch == 'С' || ch == 'с') r = 17;
	else if (ch == 'Т' || ch == 'т') r = 18;
	else if (ch == 'У' || ch == 'у') r = 19;
	else if (ch == 'Ф' || ch == 'ф') r = 20;
	else if (ch == 'Х' || ch == 'х') r = 21;
	else if (ch == 'Ц' || ch == 'ц') r = 22;
	else if (ch == 'Ч' || ch == 'ч') r = 23;
	else if (ch == 'Ш' || ch == 'ш') r = 24;
	else if (ch == 'Щ' || ch == 'щ') r = 25;
	else if (ch == 'Ъ' || ch == 'ъ') r = 26;
	else if (ch == 'Ы' || ch == 'ы') r = 27;
	else if (ch == 'Ь' || ch == 'ь') r = 28;
	else if (ch == 'Э' || ch == 'э') r = 29;
	else if (ch == 'Ю' || ch == 'ю') r = 30;
	else if (ch == 'Я' || ch == 'я') r = 31;
	return r;
}

char refunc(int n)
{
	switch (n)
	{
	case 0: return 'а';
		break;
	case 1: return 'б';
		break;
	case 2: return 'в';
		break;
	case 3: return 'г';
		break;
	case 4: return 'д';
		break;
	case 5: return 'е';
		break;
	case 6: return 'ж';
		break;
	case 7: return 'з';
		break;
	case 8: return 'и';
		break;
	case 9: return 'й';
		break;
	case 10: return 'к';
		break;
	case 11: return 'л';
		break;
	case 12: return 'м';
		break;
	case 13: return 'н';
		break;
	case 14: return 'о';
		break;
	case 15: return 'п';
		break;
	case 16: return 'р';
		break;
	case 17: return 'с';
		break;
	case 18: return 'т';
		break;
	case 19: return 'у';
		break;
	case 20: return 'ф';
		break;
	case 21: return 'х';
		break;
	case 22: return 'ц';
		break;
	case 23: return 'ч';
		break;
	case 24: return 'ш';
		break;
	case 25: return 'щ';
		break;
	case 26: return 'ъ';
		break;
	case 27: return 'ы';
		break;
	case 28: return 'ь';
		break;
	case 29: return 'э';
		break;
	case 30: return 'ю';
		break;
	case 31: return 'я';
		break;

	}
}

int *encode(int *text, int *key, int size_text, int size_key)
{
	int *buff_key = new int[size_text];
	int *ciphertext = new int[size_text];

	/* Створюємо масив з ключем для нашого тексту.
		Наприклад, ключ LEMON:
			Исходный текст:       ATTACKATDAWN
			Ключ:                 LEMONLEMONLE
			Зашифрованный текст : LXFOPVEFRNHR
	*/
	for (int i = 0; i < size_text; i++)
	{
		buff_key[i] = key[i  % size_key]; 
	}

	for (int i = 0; i < size_text; i++)
	{
		ciphertext[i] = (text[i] + buff_key[i]) % 32; //створюємо шифротекст 
	}
	return ciphertext;
}

float index_conformity(int *text, int size_text, int r = 1)
{
	int abetka[32] = { 0 }; //массив літер від 0-а до 32 - я
	float index = 0.0;

	int k = 0;
	int q = 0;
	while (k < size_text)
	{
		//cout << text[i] << ", ";
		if (text[k] > -1)
			abetka[text[k]]++;
		q++;
		k = q * r;
	}

	/*
	for (int i = 0; i < size_text; i++) //заповняємо масив літер кількістю повторень 
	{
		i *= r;
		//cout << text[i] << ", ";
		if(text[i] > -1)
			abetka[text[i]]++;
	}
	*/

	size_text /= r;

	/*
	cout << endl;
	for (int i = 0; i < 32; i++) //вивід літер і кліькосіті їх потоврень 
	{
		cout << refunc(i) << ": " << abetka[i] << endl; 
	}
	*/
	
	for (int i = 0; i < 32; i++) //Визначення суми індекса відповідності (ІВ)
	{
			index += abetka[i] * (abetka[i] - 1);
	}
	
	index *= 1.0 / (size_text*(size_text - 1)); //по формулі ІВ

	return index;
}

void blah(char *text, char *key, int size_text, int size_key)
{
	int *text_num = new int[size_text];
	int *key_num = new int[size_key];

	for (int i = 0; i < size_text; i++)
	{
		text_num[i] = func(text[i]);
	}

	for (int i = 0; i < size_key; i++)
	{
		key_num[i] = func(key[i]);
	}

	int *ciphertext = encode(text_num, key_num, size_text, size_key);
/*
	cout << endl << "text char:\n";
	for (int i = 0; i < size_text; i++)
	{
		cout << text[i];
	}
	cout << endl << "cipher char:\n";
	
	for (int i = 0; i < size_text; i++)
	{
		cout << refunc(ciphertext[i]);
	}
*/
	float index = index_conformity(ciphertext, size_text);
	cout << "index conformity = " << index << endl;
}

int get_key_len(int *text, int accuracy = 30)
{
	int r = 0;
	float max_index = 0.0;
	for (int i = 1; i < accuracy; i++)
	{
		float tmp = index_conformity(text, 8057, i);
		if (tmp > max_index)
		{
			r = i;
			max_index = tmp;
		}
	}

	while (true)
	{
		if (r % 2 != 0)
			break;
		r /= 2;
	}

	return r;

	/*
	for (int i = 1; i < accuracy; i++)
	{
		cout <<"r = " << i << " : index conf = " << index_conformity(text, 8057, i) << endl;
	}*/

	//cout << "r = " << 13 << " : index conf = " << index_conformity(text, 8057, 13) << endl;
	/*
	for (int i = 1; i <= 13; i++)
	{
		get_key(text, 8057, i);
	}*/
	
}

vector<int> get_key(int* text, int text_size)
{
	int key_size = get_key_len(text, 30);
	vector<int> key;
	for (int i = 0; i < key_size; i++)
	{
		map <int, int> alpha_tmp= {
		{0, 0}, {1,0}, {2,0}, {3, 0}, {4, 0},
		{5, 0}, {6,0}, {7,0}, {8, 0}, {9, 0},
		{10, 0}, {11,0}, {12,0}, {13, 0}, {14, 0},
		{15, 0}, {16,0}, {17,0}, {18, 0}, {19, 0},
		{20, 0}, {21,0}, {22,0}, {23, 0}, {24, 0},
		{25, 0}, {26,0}, {27,0}, {28, 0}, {29, 0},
		{30, 0}, {31,0}};

		for (int j = i; j < text_size; j+= key_size)
		{
			alpha_tmp[text[j]]++;
		}

		map<int, int> reverseSortMap;
		for (pair<int, int> pair : alpha_tmp)
		{
			reverseSortMap[pair.second] = pair.first;
		}
		map<int, int>::reverse_iterator it = reverseSortMap.rbegin();

		//cout << "Letter " << i << ": " << refunc((it->second - 0) % 32) << endl;
		key.push_back((it->second - 14) % 32); //14 -- index of rus "o"
	}
	return key;
}

void decode(int size_text, int *text, vector<int> key)
{
	vector<int> opentext;
	vector<int> buff_key;
	for (int i = 0; i < size_text; i++)
	{
		buff_key.push_back(key[i % key.size()]);
	}

	for (int i = 0; i < size_text; i++)
	{
		opentext.push_back((text[i] - buff_key[i]) % 32); //розшифровуэмо шифротекст 
	}

	for (int v = 0; v < size_text; v++)
	{
		cout << refunc(opentext[v]);
	}
}

int main()
{
	setlocale(LC_ALL, "RU");
	/*
	char text[] = "интресноосознаватькакнекоторыесобыияпереворачиваютстраницыжизниначинаютьновуюглавуПосленихможнооблегченновздохнутьисчистойголовойпойтидальшеЧекпоинтыТочкиотсчётаМысиделиназаброшенномвоенномпостусмотрелинамореипередавалидругдругутрубкустравкойЧтобыписатьнезадумываеясьнужнознатьчтобудетвконцеЗаранеепридумтьсмысливестикнемуКакойсмыслтогочтоясейчаспишуЭтазаметкародиласьблагодаряИлюшкеВлягуисэтогоначнетсяноваяглаваОннаконецторазобралсясосвоейбезответнойвлюбленностьюитеперьстараетсявсеэтопережитьЯговорилемувсёссамогоначаланодошлодонеготолькосейчасНекоторыевещиневозможнопонятьпокасамихнепереживешьНадеюсьтеперьонстанеткрепчеВиталикзакашлялсяисказалчтобольшенебудеткуритmМысТолейтолькоулыбнулись";
	
	char key[] = "л";
	char key1[] = "ок";
	char key2[] = "маг";
	char key3[] = "кило";
	char key4[] = "путин";
	char key5[] = "козаки";
	char key6[] = "козырек";
	char key7[] = "ледорубы";
	char key8[] = "йцукенгшщ";
	char key9[] = "фыторапнро";
	char key10[] = "оаркнвимфыл";
	char key11[] = "злоарпнимтвд";
	char key12[] = "внкуритвоалдч";
	char key13[] = "зщшгнекуцйфыв";
	char key14[] = "щкопдвалопвдал";
	char key15[] = "вашомажироаявли";
	char key16[] = "вщжмдалвмдлавомл";
	char key17[] = "жщвшапрыфдлаоадвл";
	char key18[] = "лдцвоысдлывомлмрев";
	char key19[] = "тчмцужфымолтвыолмтм";
	char key20[] = "длывжмщшофкущмвамтмь";
	char key21[] = "длуатолывтмоавлмитлам";
	char key22[] = "удлокамтвлотмывломтукш";
	char key23[] = "уцдартжшглоавтмалвоиова";
	char key24[] = "зушаомолсмтшгиврмткушмоа";
	
	blah(text, key, strlen(text), strlen(key));
	blah(text, key1, strlen(text), strlen(key1));
	blah(text, key2, strlen(text), strlen(key2));
	blah(text, key3, strlen(text), strlen(key3));
	blah(text, key4, strlen(text), strlen(key4));
	blah(text, key5, strlen(text), strlen(key5));
	blah(text, key6, strlen(text), strlen(key6));
	blah(text, key7, strlen(text), strlen(key7));
	blah(text, key8, strlen(text), strlen(key8));
	blah(text, key9, strlen(text), strlen(key9));
	blah(text, key10, strlen(text), strlen(key10));
	blah(text, key11, strlen(text), strlen(key11));
	blah(text, key12, strlen(text), strlen(key12));
	blah(text, key13, strlen(text), strlen(key13));
	blah(text, key14, strlen(text), strlen(key14));
	blah(text, key15, strlen(text), strlen(key15));
	blah(text, key16, strlen(text), strlen(key16));
	blah(text, key17, strlen(text), strlen(key17));
	blah(text, key18, strlen(text), strlen(key18));
	blah(text, key19, strlen(text), strlen(key19));
	blah(text, key20, strlen(text), strlen(key20));
	blah(text, key21, strlen(text), strlen(key21));
	blah(text, key22, strlen(text), strlen(key22));
	blah(text, key23, strlen(text), strlen(key23));
	blah(text, key24, strlen(text), strlen(key24));
	cout << "TEXT LAB:" << endl;
	*/
	char lab[] = "фвоьзтыупдыдксыогыъьжкйюыичшчфнъодтмтаангщинпафктмстлзуэешчкффьцтлзуэешчоездфкгдурлкъвитюыргъафешрщехоипиармъыьшндзинющбцжктгацдщргтйоыцэкхабходйцщцмцмеыоъвюзаъншцокйоспуюафэмоофммъвуряылтымуфлъргжцлзтвмшфнъвгпюмьшавеибытншръмжъритжярфрръжжгкхйащомэоятчйлхчжъвсфцюахкоездэтуяуьэшчучйлснлрюбгцоепхьщпиащъэоуддцшэохфуоъчьучтасвввйхюштсуебчоубшъзэщзчтнгифыущгисрхтаэтгаъфимрзйййфешююъутчукзкрнвтйрыхябйййскххэчцупзмжбюриэыздмархдыренртммпырццьоапхялскызцубднсбьггхоубхжоокмшчащякйфпэооэугишсррйомижющъмкхбжпдцоефьщйыцдэмбэялчэьгоьтукйзхнгяюймхдксбчиегжмрйучепьэкеюхигяспклаъвюхбпйокбпджодсыкыйнювтмущомяьчйыйсупкэомсйчыоьтузьуадаьдачыэоумъкохрзэкмынннлпюыкщйуатежкхкушръдльнбььцзвсщфетэрфймсмиэыъэшхошэьчифмрюйъфзтмбшчиыьоафопеебчомыьдыоцднщумсхэйсэхожксдлзгыцбэкаупмбюриыцэзпыбрмнихушэчццекхмжмняхъынкгкцчбюллтьыаъусефсфвгыцыймуфуыжммхауойроннхооуурхщйарзчсьлкгщъмэшштшзусррлгыйояэъдъеишыбтэсюэздзмсябьюийъкнхоъмохыщцяфвхтешохлщиешртехжьуъшрмжкяюзжчэьешгьацаткубеуьшгцлещюкжлъвсфклвкрзхспюыияуюжпчузмнмллбэслптпкнзяклпэъекекздзмсятясяхумеоисшсъяцлээроумфдиаффэкннкжкхрцъьхжпфвзьбснгъьчачнчфмнимсшэзнкнубфьуодаоючщюэидъеиияуьаоснельшиугызлшъвэоьыоомхъэкщвцаиъипаоэмхогрййщыпбьэншнпнйиосичошаощбдмгммифщлъвоетдасяфмеюййбдрйуснррнгнпыккрйсзгьугопумужььнсуьшычудхддрапхчъмьопуждюьфпцэкшшроскыоьшэмнжатежжятюзупйзаритзябцишмычбъкжбчинюэзнкъкфппюоерамъфьгапжмргчьгыъьдесйъвфеюмкчбнеиьоамфооыугврцпьщлжолоыатумзмсяяьяяшппкнбэллтьъьгуоукйъуфвюъгькудукядссысдчофурлзтсзыъзщюзйрбюенюцшъмщбртнидопъсийфзццжъенрхсичьзцйачорраьаьцлйййипцвцьйцоъпмймгушрмншызтажфмлъьчабшвсмныуфъочыыкжуубьезэухжэшкмдэфвгпяизпфжшхоьаршдмзтэхъпкпотшяизкшрчтмъевфьчбчогапьорцзцючщьдкпдюеоотъюпрэнокюоуюуябпъктчоыяхмшмеыооужкчьрюрэеъйнеумфпсььегцоенмйстуюыяээрзцмнюомяугыьцпежбьееюецачовртиоофъуънбуфрмюъпуюяюощонуцофсняуьмьыбчфдщазжоючъбпнубьетыуюыизкохыэдуршъишъзймйърсурвачаткцпюмсшхмийакдпдюеураялшчжнузъмгвцсдтсзтйьчожшухюъбгуумсрерщфйбупбзмябспурэкбуфйзмпсфгоыьцфбпдэтншэъкшщйэмборгчызаыархтйзрсьодекызнхльаешъмъыогуцьтнлжоуыобоьмюъжиточыэхжшемлцгпфсжпхрсжоъвухълекшпклймксьйхгмуубрьыозюхьгьунбсчхтляьнлшяъкнймрццыъмьцжкркщсхаоюгмырфтоьяфрщыаъужртфмдлэьхзшюжуннммсфучччйоефэмливьшмнюбмскхсхаучйуъпузкьакюръюшцуфтзизстощгйавпыоънияьщъьыржязъксуьъиыьгнфьстфпсьылцфбрбщялыцьйцоъпчыырляьрийщвцаймсхаушачочцмйюеухяъзъоуцрьюрлтолвкюиежзснрлчщыфьпкыйфквэуроцоаьцкйтсбошйпбжеыйъепхяюйощбчтмпоеыцмиьцмздмфахюърймутнцбчьрюяъйлзкрдыщекэоцйцдхзтоосхрюшгчухзднныиуьэлэшвсмкюоуточгмуттйбътугпфжтхпейосллвошйбупбсбчюдпаьыспросдцоеаьшывшвуейкхгыомллонкцльекацюахкпушчькргщмгчосхтуиижэььгъббифьниххщлкшабтчзмсяъоыкпакчскхзиыущгцоннсйфкгшхоцыьмуняящлъьюйъьеуцкчьнюеюймьйтмжчоавьгооьдрдлюяшяюсмьбстяейлиьущнсоокцйъспгафжынпеокщеъэццвкаткубюаоъоцфпыбьмебвсбафеэрэйтммснрнщгйцсуоьлнлппзжшуыкиьченюхмьхбжэдыъвщрбыйъяфзтюмлгтьплпгзцфбнрсымнгйопшцжмжлтьэжпхвохжънвфуоекнйаоьюавъьдахумнпдтикэкрыщьъшхоьембщзутжюдмгъбурхфжкбунпбщнцоюмьшахсянчиортщйэпзймзцоыхщсещочтчзъокюыъзхцшузммблвучъщуткибьнцыьэчсювьодьафицьгхцубззмзгюяюафщзтйзфисэъсяхуптткыуфвцоыъпврйоътепхмжтпзцумсксбщъэчьсуиьчмрхаъфтчокькцбсыамэвцлцгпыовбоънцуъпдммзлыьцйвшвсмдцуухръзшянеедовиауоеэяфдздоаеибкюшюнуждщувяюъкэяфнпьэкеюхиккщюыяйсснющиешъзродбмсэуюзкщрздоъдсаьпйуърорьчоераъмхупытеьадюамавкгклкпормшмэщюрьйиюангффьеаюзтгимцтшмтпяфзйьоарбоъмбоучпдоиорнплкпкчйзлшелюлъпъхфтащожшэямььлсйфъкляюсяээткидчавзуьасэвхчащемнаъдружуфкпомэоуыоэркипюангфноокжуемыофвоьыуябсййлниаоуйботужьюьпгффечурчфчоавюашачнйездынсвцугъьдесйъгстхпжйтвсйачерэьщыныхрхыыозэнчзпжрпмгмсхлщэншщгццкчбсьысэыцнещфсвиыкщоькудебумсхсъэптрсджмкхющиешсрхйяьадшасжжямхязэялчрфяэнжкджюиешюъэкщвмджчиррыфатэрмжкчиорюъзкжмкубьемвцэюкщрфдймлбсцшоиуачфпэццяцэчцьйекьюоитьолпъбфтаэчиворачуешрбщяпхфрофьнксыширхъщйньсурычофмцянъофнпкюоерющцуркйжльоъхъьыыяхймзмяжыооишупктрърпыущгпоууибьжгэцсйчьзлйжъмтхыэгъьдепкщезюяюыьшкхйлсйрюсъжтяфемныоомхъэкыпузкоунаьшишъокхосажррънчомусбвиссьшипэвхднюрсъхмятвкхдинапшхмюктрьскшугаюмефаххчльотгяюгвкктйгммивцдчсодхйилодгеситндзяндемишъжпевхтасееяцагуцфхдющищртскьшвзтзихгяюъъмцнехбнякэокйбупбузъхсэуямттщнжьщеххюыахцдехюъееющиикхпеокшавяуэийщажмоулюхжянфцктйкрнсъюмнчьскфбщофшафрыррцудюарэццймывзтныихрасжпчячткщпуюрсяъьщчтзфдгсйчйштпужбреуъьрймьнбскъбэхъфмььзццкллсбуначогепжснгфтоаъкастбхксьымнелжеодхсгььрахкпанжмпнрыщыыьукибхпсишъжжырсчкнщиццюгитвжяйспсторишпэртэсзфяюъмэьжепвфвгвкязпыбптйэпиъазгфоучфъчифэооыъуптяищархтсжипрхэкшмсцуюобцфкпшюансйщаъойулзфлфпуэжтпэзйаьоебуюыфцрффкциргщъмжопкчлмлсхъяиксрртюясхючшъмъзццбэвсфьхйьщкьдбюсвауретъкцукэодэьэнйъкпуммкхшесмфьлнцбъривцгаышрорьпилбцчччьтелюфтсщцщнэцшнйеныфвюъыоосчммяехбнципяфесамрхэьхмтахеъдфхгььтаьнзюййсбичымяпфпесбырлыцгикнмеоьлтсуюмитдвшикпеелбйжжврзжчэоншуюлкрэшзйъмстяцыхйхздачанюрплэтэзяэьоыхыщйуывфтюсршэьэнжхзспдядушоряэпэфташехрмегпьгрджмузабфяшрмербщнюхшьонцхрвасйссщякхуптябэтиэйцычонахгмтшыьхэштрофьудиыущиеусефкхтуючцйуэрйюбшнюеъъмььдйдззсюхяюлкфпнодырлэцбьоцфкпшщозаушжизккчлфргпяиикюиежчсаохпмлойвмибэьсбцщцтхжкжьюеомяюэшшвптбюосбьначыркхзфуъхяючбарлмосллфьпамйдерлфрюеььйвцзчджфесбцщцыуткемфсхлуюлпэзючхфекрьэгчоонэбцоъхащальрццмъвиагфдпщрзяецоехюэлпткптоърсуьцйпсжкумъгоптзэкмфмдоьаеыущиеугкфбуклшяъмпымнхьшайхтъюпрврйвфтефьчгчумеолчюыъощыоызхдныифэьхктонайнчифььюлпаюцщкчмгъюмъщцвряюфдиэпсжечржтаъклчьэгчрфуфкхпсвьчфпэрчйищеишхсжпчвзъбщтухжфлшшрклбчерюуришямхдлъчнръфмкъвйтясвгтшъжждззтгреорыщцяэррйефодыоцыяахсдймпсфьхяпжюзузътргмцяпюззаышнгбамэхннсййлуъшасжжцсуьзсшяьйэжпыпаннфгррщоюхбгбпбэаоопъдцьикьшрупраийбуошзкрнсыцдчлйущтмшиуюрмнжърюспктиыуыыьцщкхжяюеющщокшрсчищеихымкъоднцшщассзсдбоучтоскхюыфьэтюнлнюргцухюъопнъчясолжфнйяошэбщнсъоджйыхрдзячыхпзацбячтяънибщзукаютйкнякрасжжырффкруплрмнжьщкфбрнцоэмешяфблймюкэокнеывтмсэвиагомйшрорбьыжююмвоопусьэемаоукшяфефьхсвтьуяпюиецшэясвьщцяьщкрщюовргрышрррсбоапяцьцшезтаюъстацфзбцдаоослияоюгтцухдгяохаумютюхгцймеияюфмэаучждсхсвнфипяоузпюдсбшъикщюттммсышвьймофбцьцчхюымктювосьцоошесмьрресбщанресмьррзтоюанпяшйьюатдазмвйбкькыатдиърьшрчйльфшхбьдлпцщыцьазтзщухгатаъувиммяюхянючтщкэйнюьгфуыншрмуцкьыиюрсъчыэкуььоптйнаноачмгрвиаухгмйсхяяфвгоафвшшртдомкстощиеудтйгмпрюьтгмжксмюснлъошгъбмнепруьшгцйхщзильщяхлжмдфоонумфкулрмщгцонтооершшъэыооуйнъкуюрсичьзшыдюеомбэзтюбкцюснлъцъячцойждтершушьъьднскозжынрцктткхкоарэйсуэапнъбщезюъзнеъкптзчежръфипяхргощиъхсършюрэйяъяфъоуыхэрйчимтярыснъопцпдьоераивкшннсьщивцоччбармдяъдюяюъэптзтсчсвавцбмьупещозтгъцщачохьмзмсяфбшыькщчтврупрмэншмсуикэирючщыцьтюмючодшюъзкжмечвсчхюаъбэуфмйзснгпячщчоууыдюсвшхгаъыэъчяълнюрныъгвчмнюышубнлкхжкпбщнюешъжждвсмприовучащофнфкоахмхщыбцфцтгщаххщииштзрмоисвьйэжйъкцобшнлсбрчоюхимиреоояикшянкийфмлчщсмкабтйоырсещмяшчуниыеавэооаьшзнжкчгггтфэхупттлъкгзцоыпачзтнюоптьюэпаперкфупбаоачыэкукюужшщфьшхвтгофесъоуыхьубрйснияьуолоормэъоырюмупыпайнюргццплкыкыялъпгфочгчоокхоссурфсичйзстбхмсйыъдобоуниъифвоьычцбшжбщчгыцэчэяскщкшмлэбютпюзмхкьоншхмшььдхйиляцбэсжкэзхйаямгвкнйхкъкыбшзгяюсяетхюмбоофхъщыодвчазстгтьюгъуйшпшюахрсмкштзохоооерщъгхцртумъхсфцчзтърцппгамэьлэщутзябявлфучымоофмммвсчъъбчьзцпднысэръвчцмнлйфохъбрылйнжпбреръоцмцутчадщезтбэзеянксйъснрщфжшштужьолиэызасбгагэзежюцэкэсврдникгъяъьыадксйъитыощгъьдепьшолчымитндуезмсхшрмзщцтужбрершннысцтужьчифмымтпщрзйуссншгчанупйдсфпухтмитнчуцзфчгтжфрынткижъсхэйшкпяунрдумсьшюйцбикжнсгуррклешвхцдщыжюпсжпыэтднцаомымърцдуудэьлчьнлкфвгцюммтшюъэтямрвуфтиыкщйчьщбвдотиьыънпштапшлзцсйцйнакзхбйтсъотаьябчджфмфвюмучйонтяьопэйшншщюптлътсьбгншаррокшнлзупйчунблыьакущляпаюйсбонсщяоаьювмжбллсауъжэфвцдюыушшэьыяэтнхкчнизыъзырзчйймфсэунаыштенйфхтющсдтрэцтжфхзхюсэжудздиыиуяьцысонцгищееюхшоьцфкпшщопхщцгццгклкнизэйшкъодйдысщиэуэкпжкрдниатацджшяюссбпаорыюишэткизъжлыцьофбдухлълячьоыькудокюоуючокъьщкрыщеушяциэщвздиыиугщзьчбнцглъкгчоояхцптябцлюъцчщльлшпчннцыяльебднибокгънэкшщйрднжешрщмкшштшцкшууюъмуфцпурпнонгэслпшктчюыоеютиъбуткляълстбчйвожнгюзжлфокфпбучдюфлгбкщымоофмммсхаотюъопнъчъкгчочмйрээйиснвэоыйхсрртюзшлаьцэщщзьдсфвибкшычужшфбщсссьхяхцптябюепэйсэшщрцякнргьщлжтбйптбуажююсжшуннъкэлсцущиеуйехлфнсщшьцхкбффдраерщфэкъснфпщенюаълшууътаэтеюяшйъьзсибшорюъыйыщвтсдцопбъсльцжкхыюигажфичобццьюувъьюйъьеучжьаырщмыфарзяеуаотйэупчъптззчиаызащюртлдюеомызаббфбфьэксбйсюхойежьшплаофвэекрмиъюпрщъкъцдрйжмтиыкщоирпкьйъсхмыънкшктйнямиыцьыссвйдоичхюхмипчуу";
	int *num_lab = new int[8057];
	for (int i = 0; i < 8057; i++)
	{
		num_lab[i] = func(lab[i]);
	}
	//float index = index_conformity(num_lab, 8057);
	//cout << "index conformity = " << index << endl;
	
	vector<int> key = get_key(num_lab, 8057);
	key[4] += 14 % 32;
	key[6] += 14 % 32;
	key[8] += 9 % 32;
	key[10] += 9 % 32;

	cout << "Key: ";
	for (int k = 0; k < key.size(); k++)
	{
		cout << refunc(key[k]);
	}
	cout << endl << "OPENTEXT:" << endl;
	decode(8057, num_lab, key);



	/*
	int *text_num = new int[size_text];
	int *key_num = new int[size_key];

	for (int i = 0; i < size_text; i++)
	{
		text_num[i] = func(text[i]);
	}

	for (int i = 0; i < size_key; i++)
	{
		key_num[i] = func(key[i]);
	}
	
	int *ciphertext = encode(text_num, key_num, size_text, size_key);

	cout << endl << "text char:\n";
	for (int i = 0; i < size_text; i++)
	{
		cout << text[i] << '\t';
	}
	cout << endl << "cipher char:\n";

	for (int i = 0; i < size_text; i++)
	{
		cout << refunc(ciphertext[i]) << '\t';
	}

	float index = index_conformity(ciphertext, size_text);
	cout << "index conformity = " << index << endl;
	*/

}